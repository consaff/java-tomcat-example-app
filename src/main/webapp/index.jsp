<html>
    <body>
        <h2># HELP jvm_gc_pause_seconds time spent in GC pause # TYPE jvm_gc_pause_seconds summary jvm_gc_pause_seconds_count{cause="Metadata GC Threshold"} 2.0 jvm_gc_pause_seconds_sum{cause="Metadata GC Threshold"} .489 jvm_gc_pause_seconds_count{cause="Allocation Failure"} 4.0 jvm_gc_pause_seconds_sum{cause="Allocation Failure"} .932 # HELP jvm_memory_used_bytes An estimate of the memory that the Java virtual machine is using for this pool # TYPE jvm_memory_used_bytes gauge jvm_memory_used_bytes{area="heap",id="PS Survivor Space"} 81920.0 # HELP jvm_memory_max_bytes The maximum amount of memory in bytes that can be used for memory management # TYPE jvm_memory_max_bytes gauge jvm_memory_max_bytes{area="heap",id="PS Survivor Space"} 41504.2 jvm_memory_max_bytes{area="heap",id="PS Old Gen"} 12310.5 jvm_memory_max_bytes{area="heap",id="PS EdenSpace"} 37854.4 jvm_memory_max_bytes{area="nonheap"} 994399.1 # HELP process_uptime_seconds The uptime of the JVM # TYPE process_uptime_seconds gauge process_uptime_seconds 44 # HELP http_server_requests_seconds_max time to complete an HTTP server request # TYPE http_server_requests_seconds_max gauge http_server_requests_seconds_max{exception="None",outcome="SUCCESS"} 11.0 # HELP http_server_requests_seconds summary of HTTP server requests # TYPE http_server_requests_seconds summary http_server_requests_seconds_sum{exception="None",method="GET",status="200"} 54 http_server_requests_seconds_count{exception="None",method="GET",status="200"} 4 http_server_requests_seconds_count{exception="None",method="GET",outcome="CLIENT_ERROR",status="501"} 2 http_server_requests_seconds_max{exception="None",method="GET",outcome="CLIENT_ERROR",status="501"} 5 # EOF</h2>
    </body>
</html>
